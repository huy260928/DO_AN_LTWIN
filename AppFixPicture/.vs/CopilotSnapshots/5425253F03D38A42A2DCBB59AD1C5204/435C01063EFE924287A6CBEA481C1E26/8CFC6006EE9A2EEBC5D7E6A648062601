using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Reflection;
using System.Windows.Forms;

namespace AppFixPicture
{
    // Partial so Designer owns control fields and InitializeComponent
    public partial class AnnotationForm : Form
    {
        private enum Tool { None, Select, Pencil, Rectangle, Circle, Arrow, Text }

        // state
        private Tool currentTool = Tool.Pencil;
        private Color currentColor = Color.Red;
        private float zoom = 1.0f; // logical zoom applied when drawing on baseBitmap
        private int currentFontSize = 12;
        private Font currentFont = new Font(FontFamily.GenericSansSerif, 12f);

        private Pen currentPen => new Pen(currentColor, 2);

        private Bitmap baseBitmap; // canonical image where drawing is applied
        private Bitmap originalBitmap; // original loaded image for full clear/restore

        // Store annotations as objects so we can select/move text
        private class TextAnnotation
        {
            public string Text;
            public Font Font;
            public Color Color;
            // Location in image coordinates (pixels of the bitmap)
            public Point Location;
        }

        // Editor state for undo/redo
        private class EditorState
        {
            public Bitmap Bitmap; // stores a copy of baseBitmap
            public List<TextAnnotation> Annotations;
            public EditorState(Bitmap bmp, List<TextAnnotation> ann)
            {
                Bitmap = bmp;
                Annotations = ann;
            }
        }

        private Stack<EditorState> undoStack = new Stack<EditorState>();
        private Stack<EditorState> redoStack = new Stack<EditorState>();
        private List<TextAnnotation> textAnnotations = new List<TextAnnotation>();

        private TextAnnotation selectedText = null;
        private bool isDraggingText = false;
        private Point dragOffset; // in control coords

        private bool isDrawing = false;
        private Point lastPoint; // in image coords

        public Bitmap EditedImage { get; private set; }

        public AnnotationForm()
        {
            Text = "Annotation";
            ClientSize = new Size(1000, 700);

            InitializeComponent();

            // Set PictureBox to fill available area and use Zoom mode so it won't overlap toolstrip
            pictureBoxCanvas.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBoxCanvas.Dock = DockStyle.Fill;

            // enable double buffering to reduce flicker
            try
            {
                this.DoubleBuffered = true;
                var prop = typeof(Control).GetProperty("DoubleBuffered", BindingFlags.Instance | BindingFlags.NonPublic);
                prop?.SetValue(pictureBoxCanvas, true, null);
            }
            catch { }

            WireEvents();
            UpdateStatus();

            try { cbFontSize.Text = currentFontSize.ToString(); } catch { }
        }

        public AnnotationForm(Image initialImage) : this()
        {
            if (initialImage != null)
            {
                originalBitmap?.Dispose();
                baseBitmap?.Dispose();

                originalBitmap = new Bitmap(initialImage);
                baseBitmap = new Bitmap(originalBitmap);
                pictureBoxCanvas.Image = baseBitmap;

                UpdateStatus();
            }
        }

        private void WireEvents()
        {
            btnOpen.Click += BtnOpen_Click;
            btnColor.Click += BtnColor_Click;
            btnFont.Click += BtnFont_Click;
            cbFontSize.SelectedIndexChanged += (s, e) => {
                if (int.TryParse(cbFontSize.Text, out int v))
                {
                    currentFontSize = v;
                    try
                    {
                        var family = currentFont?.FontFamily ?? FontFamily.GenericSansSerif;
                        var style = currentFont?.Style ?? FontStyle.Regular;
                        currentFont?.Dispose();
                        currentFont = new Font(family, currentFontSize, style);
                        if (selectedText != null)
                        {
                            selectedText.Font?.Dispose();
                            selectedText.Font = new Font(family, currentFontSize, style);
                        }
                    }
                    catch { }
                }
            };

            btnSelect.Click += (s, e) => SetTool(Tool.Select);
            btnPencil.Click += (s, e) => SetTool(Tool.Pencil);
            btnRect.Click += (s, e) => SetTool(Tool.Rectangle);
            btnCircle.Click += (s, e) => SetTool(Tool.Circle);
            btnArrow.Click += (s, e) => SetTool(Tool.Arrow);
            btnText.Click += (s, e) => SetTool(Tool.Text);

            btnUndo.Click += BtnUndo_Click;
            btnRedo.Click += BtnRedo_Click;
            btnSave.Click += BtnSave_Click;
            btnClear.Click += BtnClear_Click;
            btnZoomIn.Click += (s, e) => { zoom += 0.1f; UpdateZoomDisplay(); };
            btnZoomOut.Click += (s, e) => { zoom = Math.Max(0.1f, zoom - 0.1f); UpdateZoomDisplay(); };
            btnApply.Click += (s, e) => ApplyAnnotationsAndClose();

            pictureBoxCanvas.MouseDown += PictureBoxCanvas_MouseDown;
            pictureBoxCanvas.MouseMove += PictureBoxCanvas_MouseMove;
            pictureBoxCanvas.MouseUp += PictureBoxCanvas_MouseUp;
            pictureBoxCanvas.Paint += PictureBoxCanvas_Paint;
            pictureBoxCanvas.DoubleClick += PictureBoxCanvas_DoubleClick;
        }

        private void SetTool(Tool t)
        {
            currentTool = t;
            statusTool.Text = "Tool: " + t.ToString();
            UpdateStatus();
        }

        private void BtnOpen_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Filter = "Image Files|*.png;*.jpg;*.jpeg;*.bmp;*.gif";
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    var img = Image.FromFile(ofd.FileName);
                    originalBitmap?.Dispose();
                    baseBitmap?.Dispose();

                    originalBitmap = new Bitmap(img);
                    baseBitmap = new Bitmap(originalBitmap);
                    pictureBoxCanvas.Image = baseBitmap;

                    ClearAnnotationStacks();
                    textAnnotations.Clear();
                    selectedText = null;
                    undoStack.Clear();
                    redoStack.Clear();
                    zoom = 1.0f;
                    UpdateStatus();
                    pictureBoxCanvas.Invalidate();
                }
            }
        }

        private void BtnColor_Click(object sender, EventArgs e)
        {
            using (ColorDialog cd = new ColorDialog())
            {
                if (cd.ShowDialog() == DialogResult.OK)
                {
                    currentColor = cd.Color;
                    UpdateStatus();
                }
            }
        }

        private void BtnFont_Click(object sender, EventArgs e)
        {
            using (FontDialog fd = new FontDialog())
            {
                if (fd.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        currentFontSize = (int)fd.Font.Size;
                        cbFontSize.Text = currentFontSize.ToString();
                        currentFont?.Dispose();
                        currentFont = new Font(fd.Font.FontFamily, fd.Font.Size, fd.Font.Style);
                        if (selectedText != null)
                        {
                            selectedText.Font?.Dispose();
                            selectedText.Font = new Font(fd.Font.FontFamily, fd.Font.Size, fd.Font.Style);
                        }
                    }
                    catch { }
                }
            }
        }

        private void BtnUndo_Click(object sender, EventArgs e)
        {
            if (undoStack.Count > 0)
            {
                redoStack.Push(CloneState(baseBitmap, textAnnotations));
                var state = undoStack.Pop();
                baseBitmap?.Dispose();
                baseBitmap = state.Bitmap;
                DisposeAnnotations(textAnnotations);
                textAnnotations = state.Annotations;
                selectedText = null;
                pictureBoxCanvas.Image = baseBitmap;
                pictureBoxCanvas.Invalidate();
            }
        }

        private void BtnRedo_Click(object sender, EventArgs e)
        {
            if (redoStack.Count > 0)
            {
                undoStack.Push(CloneState(baseBitmap, textAnnotations));
                var state = redoStack.Pop();
                baseBitmap?.Dispose();
                baseBitmap = state.Bitmap;
                DisposeAnnotations(textAnnotations);
                textAnnotations = state.Annotations;
                selectedText = null;
                pictureBoxCanvas.Image = baseBitmap;
                pictureBoxCanvas.Invalidate();
            }
        }

        private void BtnSave_Click(object sender, EventArgs e)
        {
            if (baseBitmap == null) return;
            using (SaveFileDialog sfd = new SaveFileDialog())
            {
                sfd.Filter = "PNG Image|*.png|JPEG Image|*.jpg";
                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    Bitmap toSave = RasterizeAnnotations();
                    var fmt = System.Drawing.Imaging.ImageFormat.Png;
                    if (sfd.FileName.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase)) fmt = System.Drawing.Imaging.ImageFormat.Jpeg;
                    toSave.Save(sfd.FileName, fmt);
                    toSave.Dispose();
                }
            }
        }

        private void BtnClear_Click(object sender, EventArgs e)
        {
            if (originalBitmap == null) return;
            PushUndo();
            baseBitmap?.Dispose();
            baseBitmap = new Bitmap(originalBitmap);
            DisposeAnnotations(textAnnotations);
            textAnnotations.Clear();
            pictureBoxCanvas.Image = baseBitmap;
            pictureBoxCanvas.Invalidate();
        }

        private void ApplyAnnotationsAndClose()
        {
            if (baseBitmap == null)
            {
                MessageBox.Show("No image to apply.", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            var result = RasterizeAnnotations();
            EditedImage?.Dispose();
            EditedImage = new Bitmap(result);
            result.Dispose();
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void PushUndo()
        {
            if (baseBitmap == null) return;
            undoStack.Push(CloneState(baseBitmap, textAnnotations));
            ClearStates(redoStack);
        }

        private EditorState CloneState(Bitmap bmp, List<TextAnnotation> ann)
        {
            Bitmap bmpCopy = bmp != null ? new Bitmap(bmp) : null;
            var annCopy = new List<TextAnnotation>();
            foreach (var a in ann)
            {
                var f = a.Font;
                var fcopy = f != null ? new Font(f.FontFamily, f.Size, f.Style) : null;
                annCopy.Add(new TextAnnotation { Text = a.Text, Font = fcopy, Color = a.Color, Location = a.Location });
            }
            return new EditorState(bmpCopy, annCopy);
        }

        private void ClearStates(Stack<EditorState> stack)
        {
            while (stack.Count > 0)
            {
                var s = stack.Pop();
                s.Bitmap?.Dispose();
                DisposeAnnotations(s.Annotations);
            }
        }

        private void ClearAnnotationStacks()
        {
            ClearStates(undoStack);
            ClearStates(redoStack);
        }

        private void DisposeAnnotations(List<TextAnnotation> ann)
        {
            if (ann == null) return;
            foreach (var a in ann)
                a.Font?.Dispose();
        }

        // Map mouse point (relative to pictureBox) to image pixel coordinates
        private Rectangle GetImageDisplayRect()
        {
            if (pictureBoxCanvas.Image == null) return Rectangle.Empty;
            var img = pictureBoxCanvas.Image;
            int pbW = pictureBoxCanvas.ClientSize.Width;
            int pbH = pictureBoxCanvas.ClientSize.Height;
            float imgAspect = (float)img.Width / img.Height;
            float boxAspect = (float)pbW / pbH;
            int drawW, drawH, offsetX, offsetY;
            if (imgAspect > boxAspect)
            {
                drawW = pbW;
                drawH = (int)(pbW / imgAspect);
                offsetX = 0;
                offsetY = (pbH - drawH) / 2;
            }
            else
            {
                drawH = pbH;
                drawW = (int)(pbH * imgAspect);
                offsetY = 0;
                offsetX = (pbW - drawW) / 2;
            }
            return new Rectangle(offsetX, offsetY, drawW, drawH);
        }

        private Point ControlToImage(Point p)
        {
            if (baseBitmap == null || pictureBoxCanvas.Image == null) return p;
            var rect = GetImageDisplayRect();
            if (rect.Width <= 0 || rect.Height <= 0) return p;
            int x = p.X - rect.X;
            int y = p.Y - rect.Y;
            float scaleX = (float)baseBitmap.Width / rect.Width;
            float scaleY = (float)baseBitmap.Height / rect.Height;
            int imgX = (int)(x * scaleX);
            int imgY = (int)(y * scaleY);
            imgX = Math.Max(0, Math.Min(baseBitmap.Width - 1, imgX));
            imgY = Math.Max(0, Math.Min(baseBitmap.Height - 1, imgY));
            return new Point(imgX, imgY);
        }

        private Point ImageToControl(Point imgPt)
        {
            if (baseBitmap == null || pictureBoxCanvas.Image == null) return imgPt;
            var rect = GetImageDisplayRect();
            float scaleX = (float)rect.Width / baseBitmap.Width;
            float scaleY = (float)rect.Height / baseBitmap.Height;
            int x = rect.X + (int)(imgPt.X * scaleX);
            int y = rect.Y + (int)(imgPt.Y * scaleY);
            return new Point(x, y);
        }

        private Bitmap GetScaledBitmap(Bitmap src, float zoomFactor)
        {
            if (src == null) return null;
            int w = Math.Max(1, (int)(src.Width * zoomFactor));
            int h = Math.Max(1, (int)(src.Height * zoomFactor));
            var nb = new Bitmap(w, h);
            using (Graphics g = Graphics.FromImage(nb))
            {
                g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                g.DrawImage(src, 0, 0, w, h);
            }
            return nb;
        }

        private void FitPictureBoxToImage()
        {
            // With Dock=Fill and SizeMode=Zoom, PictureBox automatically fits; just invalidate to redraw overlays
            pictureBoxCanvas.Invalidate();
        }

        private void PictureBoxCanvas_MouseDown(object sender, MouseEventArgs e)
        {
            if (baseBitmap == null) return;
            isDrawing = true;
            lastPoint = ControlToImage(e.Location);

            if (currentTool == Tool.Select)
            {
                var hit = GetAnnotationAt(e.Location);
                if (hit != null)
                {
                    PushUndo();
                    selectedText = hit;
                    isDraggingText = true;
                    var topLeft = ImageToControl(hit.Location);
                    dragOffset = new Point(e.X - topLeft.X, e.Y - topLeft.Y);
                }
                else
                {
                    selectedText = null;
                    isDraggingText = false;
                }
            }
            else
            {
                if (currentTool == Tool.Pencil || currentTool == Tool.Rectangle || currentTool == Tool.Circle || currentTool == Tool.Arrow || currentTool == Tool.Text)
                    PushUndo();
            }
        }

        private void PictureBoxCanvas_MouseMove(object sender, MouseEventArgs e)
        {
            if (baseBitmap == null) return;
            statusCoords.Text = $"X:{e.X} Y:{e.Y}";
            if (!isDrawing) return;

            if (isDraggingText && selectedText != null)
            {
                var newTopLeftControl = new Point(e.X - dragOffset.X, e.Y - dragOffset.Y);
                selectedText.Location = ControlToImage(newTopLeftControl);
                pictureBoxCanvas.Invalidate();
                return;
            }

            if (currentTool == Tool.Pencil)
            {
                var imgPt = ControlToImage(e.Location);
                using (Graphics g = Graphics.FromImage(baseBitmap))
                {
                    g.SmoothingMode = SmoothingMode.AntiAlias;
                    using (Pen p = new Pen(currentColor, Math.Max(1, (int)(2 * zoom))))
                        g.DrawLine(p, lastPoint, imgPt);
                }
                lastPoint = imgPt;
                pictureBoxCanvas.Invalidate();
            }
            else
            {
                pictureBoxCanvas.Invalidate();
            }
        }

        private void PictureBoxCanvas_MouseUp(object sender, MouseEventArgs e)
        {
            if (baseBitmap == null) return;
            isDrawing = false;

            if (isDraggingText)
            {
                isDraggingText = false;
                selectedText = null;
                pictureBoxCanvas.Invalidate();
                return;
            }

            var imgPt = ControlToImage(e.Location);

            if (currentTool == Tool.Rectangle)
            {
                var r = GetRect(lastPoint, imgPt);
                using (Graphics g = Graphics.FromImage(baseBitmap))
                using (Pen p = new Pen(currentColor, Math.Max(1, (int)(2 * zoom))))
                    g.DrawRectangle(p, r);
                pictureBoxCanvas.Invalidate();
            }
            else if (currentTool == Tool.Circle)
            {
                var r = GetRect(lastPoint, imgPt);
                using (Graphics g = Graphics.FromImage(baseBitmap))
                using (Pen p = new Pen(currentColor, Math.Max(1, (int)(2 * zoom))))
                    g.DrawEllipse(p, r);
                pictureBoxCanvas.Invalidate();
            }
            else if (currentTool == Tool.Arrow)
            {
                DrawArrowOnBitmap(lastPoint, imgPt);
                pictureBoxCanvas.Invalidate();
            }
            else if (currentTool == Tool.Text)
            {
                string txt = PromptText("Enter text:", string.Empty);
                if (!string.IsNullOrEmpty(txt))
                {
                    var a = new TextAnnotation { Text = txt, Font = new Font(currentFont.FontFamily, currentFont.Size, currentFont.Style), Color = currentColor, Location = imgPt };
                    textAnnotations.Add(a);
                    pictureBoxCanvas.Invalidate();
                }
            }
            UpdateStatus();
        }

        private void PictureBoxCanvas_Paint(object sender, PaintEventArgs e)
        {
            if (baseBitmap == null) return;

            // draw annotations and preview shapes on top of PictureBox's rendered (zoomed) image
            if (isDrawing && (currentTool == Tool.Rectangle || currentTool == Tool.Circle || currentTool == Tool.Arrow))
            {
                var mouseControl = pictureBoxCanvas.PointToClient(Cursor.Position);
                var startControl = ImageToControl(lastPoint);
                var r = GetRect(startControl, mouseControl);
                using (Pen p = new Pen(currentColor, 2))
                {
                    e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                    if (currentTool == Tool.Rectangle) e.Graphics.DrawRectangle(p, r);
                    else if (currentTool == Tool.Circle) e.Graphics.DrawEllipse(p, r);
                    else if (currentTool == Tool.Arrow) DrawArrow(e.Graphics, startControl, mouseControl, p);
                }
            }

            foreach (var a in textAnnotations)
            {
                var dispPt = ImageToControl(a.Location);
                var imgRect = GetImageDisplayRect();
                float scale = (float)imgRect.Width / baseBitmap.Width;
                using (Font drawFont = new Font(a.Font.FontFamily, Math.Max(1f, a.Font.Size * scale), a.Font.Style))
                using (Brush b = new SolidBrush(a.Color))
                {
                    e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                    e.Graphics.DrawString(a.Text, drawFont, b, dispPt);
                }
            }
        }

        private void PictureBoxCanvas_DoubleClick(object sender, EventArgs e)
        {
            var me = e as MouseEventArgs;
            Point p = me != null ? me.Location : pictureBoxCanvas.PointToClient(Cursor.Position);
            var hit = GetAnnotationAt(p);
            if (hit != null)
            {
                PushUndo();
                string res = PromptText("Edit text:", hit.Text);
                if (res != null)
                {
                    hit.Text = res;
                    pictureBoxCanvas.Invalidate();
                }
            }
        }

        private Rectangle GetRect(Point p1, Point p2)
        {
            return new Rectangle(Math.Min(p1.X, p2.X), Math.Min(p1.Y, p2.Y), Math.Abs(p1.X - p2.X), Math.Abs(p1.Y - p2.Y));
        }

        private void DrawArrowOnBitmap(Point p1, Point p2)
        {
            using (Graphics g = Graphics.FromImage(baseBitmap))
            using (Pen p = new Pen(currentColor, Math.Max(1, (int)(2 * zoom))))
            {
                g.SmoothingMode = SmoothingMode.AntiAlias;
                DrawArrow(g, p1, p2, p);
            }
            pictureBoxCanvas.Invalidate();
        }

        private void DrawArrow(Graphics g, Point p1, Point p2, Pen p)
        {
            g.DrawLine(p, p1, p2);
            var ang = Math.Atan2(p2.Y - p1.Y, p2.X - p1.X);
            int len = 10;
            PointF p3 = new PointF((float)(p2.X - len * Math.Cos(ang) + len * Math.Sin(ang)), (float)(p2.Y - len * Math.Sin(ang) - len * Math.Cos(ang)));
            PointF p4 = new PointF((float)(p2.X - len * Math.Cos(ang) - len * Math.Sin(ang)), (float)(p2.Y - len * Math.Sin(ang) + len * Math.Cos(ang)));
            g.FillPolygon(new SolidBrush(p.Color), new PointF[] { p2, p3, p4 });
        }

        private TextAnnotation GetAnnotationAt(Point controlPoint)
        {
            for (int i = textAnnotations.Count - 1; i >= 0; i--)
            {
                var a = textAnnotations[i];
                if (a == null) continue;
                var dispPt = ImageToControl(a.Location);
                var imgRect = GetImageDisplayRect();
                float scale = (float)imgRect.Width / baseBitmap.Width;
                using (var f = new Font(a.Font.FontFamily, Math.Max(1f, a.Font.Size * scale), a.Font.Style))
                {
                    var size = TextRenderer.MeasureText(a.Text, f);
                    var rect = new Rectangle(dispPt, size);
                    if (rect.Contains(controlPoint)) return a;
                }
            }
            return null;
        }

        private string PromptText(string prompt, string initial)
        {
            using (Form f = new Form())
            using (TextBox tb = new TextBox() { Left = 10, Top = 30, Width = 360, Text = initial })
            using (Button ok = new Button() { Text = "OK", Left = 200, Width = 80, Top = 60, DialogResult = DialogResult.OK })
            using (Button cancel = new Button() { Text = "Cancel", Left = 290, Width = 80, Top = 60, DialogResult = DialogResult.Cancel })
            {
                f.Text = prompt;
                f.ClientSize = new Size(400, 110);
                f.Controls.Add(new Label() { Left = 10, Top = 8, Text = prompt, AutoSize = true });
                f.Controls.Add(tb);
                f.Controls.Add(ok);
                f.Controls.Add(cancel);
                f.AcceptButton = ok;
                f.CancelButton = cancel;
                return f.ShowDialog(this) == DialogResult.OK ? tb.Text : null;
            }
        }

        private Bitmap RasterizeAnnotations()
        {
            Bitmap bmp = new Bitmap(baseBitmap.Width, baseBitmap.Height);
            using (Graphics g = Graphics.FromImage(bmp))
            {
                g.DrawImage(baseBitmap, 0, 0);
                g.SmoothingMode = SmoothingMode.AntiAlias;
                foreach (var a in textAnnotations)
                {
                    using (Brush b = new SolidBrush(a.Color))
                    {
                        g.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                        g.DrawString(a.Text, a.Font, b, a.Location);
                    }
                }
            }
            return bmp;
        }

        private void UpdateZoomDisplay()
        {
            // zoom affects drawing scale only; PictureBox keeps showing the scaled image via SizeMode.Zoom
            pictureBoxCanvas.Invalidate();
            statusZoom.Text = $"Zoom: {(int)(zoom * 100)}%";
        }

        private void UpdateStatus()
        {
            statusTool.Text = "Tool: " + currentTool.ToString();
            statusZoom.Text = $"Zoom: {(int)(zoom * 100)}%";
        }
    }
}
