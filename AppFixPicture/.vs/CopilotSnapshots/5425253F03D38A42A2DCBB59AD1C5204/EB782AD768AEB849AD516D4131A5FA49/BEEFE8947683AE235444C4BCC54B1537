using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

// Add Windows Media Player interop namespaces
using AxWMPLib;
using WMPLib;

namespace AppFixPicture
{
    public partial class frmEditVideo : Form
    {
        private TimeSpan startTime = TimeSpan.Zero;
        private TimeSpan endTime = TimeSpan.Zero;
        private string currentVideoPath;

        private AxWindowsMediaPlayer axPlayer;
        private Timer playbackTimer;

        public frmEditVideo()
        {
            InitializeComponent();

            // create and host Windows Media Player control inside panelPreview
            try
            {
                axPlayer = new AxWindowsMediaPlayer();
                ((System.ComponentModel.ISupportInitialize)(axPlayer)).BeginInit();
                axPlayer.Dock = DockStyle.Fill;
                axPlayer.uiMode = "none"; // hide controls, we'll use our buttons
                // add to preview panel
                panelPreview.Controls.Add(axPlayer);
                // ensure placeholder label is on top until a file is opened
                lblPreviewPlaceholder.BringToFront();
                ((System.ComponentModel.ISupportInitialize)(axPlayer)).EndInit();

                // timer to update trackbar as the video plays
                playbackTimer = new Timer();
                playbackTimer.Interval = 250; // 4 updates per second
                playbackTimer.Tick += PlaybackTimer_Tick;
            }
            catch
            {
                // If WMP ActiveX not available, ignore — UI will still work but no preview
            }

            // Hook up basic events
            btnOpen.Click += BtnOpen_Click;
            btnPlay.Click += BtnPlay_Click;
            btnPause.Click += BtnPause_Click;
            btnBackward.Click += BtnBackward_Click;
            btnForward.Click += BtnForward_Click;
            btnSetStart.Click += BtnSetStart_Click;
            btnSetEnd.Click += BtnSetEnd_Click;
            btnTrim.Click += BtnTrim_Click;
            btnSaveExport.Click += BtnSaveExport_Click;
            trackBarTime.Scroll += TrackBarTime_Scroll;

            // initialize labels
            lblStartTime.Text = "Start: 00:00:00";
            lblEndTime.Text = "End: 00:00:00";
        }

        private void PlaybackTimer_Tick(object sender, EventArgs e)
        {
            if (axPlayer == null || axPlayer.currentMedia == null) return;
            try
            {
                double dur = axPlayer.currentMedia.duration;
                if (dur > 0)
                {
                    int seconds = (int)axPlayer.Ctlcontrols.currentPosition;
                    if (trackBarTime.Maximum != (int)dur)
                    {
                        trackBarTime.Maximum = (int)dur;
                    }
                    if (seconds >= 0 && seconds <= trackBarTime.Maximum)
                    {
                        trackBarTime.Value = seconds;
                    }
                }
            }
            catch { }
        }

        private void BtnOpen_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Filter = "Video Files|*.mp4;*.avi;*.wmv;*.mov;*.mkv";
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    currentVideoPath = ofd.FileName;

                    // update placeholder text and hide it when player used
                    if (lblPreviewPlaceholder != null)
                    {
                        lblPreviewPlaceholder.Text = Path.GetFileName(currentVideoPath);
                    }

                    if (axPlayer != null)
                    {
                        try
                        {
                            axPlayer.URL = currentVideoPath;
                            axPlayer.Ctlcontrols.play();
                            playbackTimer.Start();

                            // set trackBar max when media is ready
                            axPlayer.PlayStateChange += AxPlayer_PlayStateChange;

                            // hide placeholder
                            lblPreviewPlaceholder.Visible = false;
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Failed to load video into player: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        MessageBox.Show($"Selected video: {currentVideoPath}", "Video Opened");
                    }
                }
            }
        }

        private void AxPlayer_PlayStateChange(object sender, _WMPOCXEvents_PlayStateChangeEvent e)
        {
            // 3 = playing, 1 = stopped, 2 = paused, 8 = media ended
            try
            {
                if (axPlayer.playState == WMPPlayState.wmppsPlaying)
                {
                    var media = axPlayer.currentMedia;
                    if (media != null)
                    {
                        double dur = media.duration;
                        if (dur > 0)
                        {
                            trackBarTime.Maximum = (int)dur;
                        }
                    }
                }
                else if (axPlayer.playState == WMPPlayState.wmppsStopped || axPlayer.playState == WMPPlayState.wmppsMediaEnded)
                {
                    playbackTimer.Stop();
                }
            }
            catch { }
        }

        private void BtnPlay_Click(object sender, EventArgs e)
        {
            if (axPlayer != null)
            {
                axPlayer.Ctlcontrols.play();
                playbackTimer.Start();
            }
        }

        private void BtnPause_Click(object sender, EventArgs e)
        {
            if (axPlayer != null)
            {
                axPlayer.Ctlcontrols.pause();
                playbackTimer.Stop();
            }
        }

        private void BtnBackward_Click(object sender, EventArgs e)
        {
            if (axPlayer != null)
            {
                try
                {
                    double pos = axPlayer.Ctlcontrols.currentPosition;
                    axPlayer.Ctlcontrols.currentPosition = Math.Max(0, pos - 5); // seek back 5s
                }
                catch { }
            }
        }

        private void BtnForward_Click(object sender, EventArgs e)
        {
            if (axPlayer != null)
            {
                try
                {
                    double pos = axPlayer.Ctlcontrols.currentPosition;
                    axPlayer.Ctlcontrols.currentPosition = pos + 5; // seek forward 5s
                }
                catch { }
            }
        }

        private void BtnSetStart_Click(object sender, EventArgs e)
        {
            if (axPlayer != null)
            {
                startTime = TimeSpan.FromSeconds(axPlayer.Ctlcontrols.currentPosition);
                lblStartTime.Text = "Start: " + startTime.ToString("hh\\:mm\\:ss");
            }
            else
            {
                startTime = TimeSpan.FromSeconds(trackBarTime.Value);
                lblStartTime.Text = "Start: " + startTime.ToString("hh\\:mm\\:ss");
            }
        }

        private void BtnSetEnd_Click(object sender, EventArgs e)
        {
            if (axPlayer != null)
            {
                endTime = TimeSpan.FromSeconds(axPlayer.Ctlcontrols.currentPosition);
                lblEndTime.Text = "End: " + endTime.ToString("hh\\:mm\\:ss");
            }
            else
            {
                endTime = TimeSpan.FromSeconds(trackBarTime.Value);
                lblEndTime.Text = "End: " + endTime.ToString("hh\\:mm\\:ss");
            }
        }

        private void BtnTrim_Click(object sender, EventArgs e)
        {
            MessageBox.Show($"Trim from {startTime} to {endTime} (implement export logic).", "Trim");
        }

        private void BtnSaveExport_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Save/Export clicked (implement save/export logic).", "Info");
        }

        private void TrackBarTime_Scroll(object sender, EventArgs e)
        {
            // Seek when user scrolls trackbar
            if (axPlayer != null && axPlayer.currentMedia != null)
            {
                try
                {
                    axPlayer.Ctlcontrols.currentPosition = trackBarTime.Value;
                }
                catch { }
            }
            // Update preview time label or other UI if needed
            // For demo, update form title with seconds
            this.Text = $"Video Editor - Position: {trackBarTime.Value}s";
        }

        private void btnOpen_Click_1(object sender, EventArgs e)
        {
            // Keep compatibility with designer-generated click handler
            BtnOpen_Click(sender, e);
        }
    }
}
